#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/i2c.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"

#define I2C_MODULE_BASE I2C0_BASE
#define LCD_I2C_ADDRESS 0x4E

// LCD Commands
#define LCD_CMD_CLEAR_DISPLAY 0x01
#define LCD_CMD_RETURN_HOME 0x02
#define LCD_CMD_ENTRY_MODE_SET 0x06
#define LCD_CMD_DISPLAY_ON 0x0C
#define LCD_CMD_FUNCTION_SET 0x28

void I2C_Init(void) {
    // Enable the peripherals for I2C0 and GPIOB
    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    // Configure the GPIO pins for I2C (PB2 and PB3)
    GPIOPinConfigure(GPIO_PB2_I2C0SCL);
    GPIOPinConfigure(GPIO_PB3_I2C0SDA);
    GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_3);
    GPIOPinTypeI2CSCL(GPIO_PORTB_BASE, GPIO_PIN_2);

    // Initialize and configure the I2C master
    I2CMasterInitExpClk(I2C_MODULE_BASE, SysCtlClockGet(), false);
}

void LCD_I2C_Write(uint8_t data, bool isCommand) {
    uint8_t upperNibble = (data & 0xF0);
    uint8_t lowerNibble = ((data << 4) & 0xF0);

    // Upper nibble
    I2CMasterSlaveAddrSet(I2C_MODULE_BASE, LCD_I2C_ADDRESS >> 1, false);
    I2CMasterDataPut(I2C_MODULE_BASE, upperNibble | (isCommand ? 0x00 : 0x01));
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_START);
    while (I2CMasterBusy(I2C_MODULE_BASE));

    // Pulse enable (high to low)
    I2CMasterDataPut(I2C_MODULE_BASE, upperNibble | 0x04); // Enable = 1
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
    while (I2CMasterBusy(I2C_MODULE_BASE));

    I2CMasterDataPut(I2C_MODULE_BASE, upperNibble); // Enable = 0
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
    while (I2CMasterBusy(I2C_MODULE_BASE));

    // Lower nibble
    I2CMasterDataPut(I2C_MODULE_BASE, lowerNibble | (isCommand ? 0x00 : 0x01));
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
    while (I2CMasterBusy(I2C_MODULE_BASE));

    // Pulse enable (high to low)
    I2CMasterDataPut(I2C_MODULE_BASE, lowerNibble | 0x04); // Enable = 1
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
    while (I2CMasterBusy(I2C_MODULE_BASE));

    I2CMasterDataPut(I2C_MODULE_BASE, lowerNibble); // Enable = 0
    I2CMasterControl(I2C_MODULE_BASE, I2C_MASTER_CMD_BURST_SEND_FINISH);
    while (I2CMasterBusy(I2C_MODULE_BASE));
}

void LCD_Init(void) {
    SysCtlDelay(SysCtlClockGet() / 3 / 50); // Delay > 15ms

    // Initialize LCD in 4-bit mode
    LCD_I2C_Write(0x30, true);
    SysCtlDelay(SysCtlClockGet() / 3 / 100); // Delay > 4.1ms
    LCD_I2C_Write(0x30, true);
    SysCtlDelay(SysCtlClockGet() / 3 / 100); // Delay > 100us
    LCD_I2C_Write(0x30, true);
    LCD_I2C_Write(0x20, true); // 4-bit mode

    // Function set, display on, clear display, entry mode set
    LCD_I2C_Write(LCD_CMD_FUNCTION_SET, true);
    LCD_I2C_Write(LCD_CMD_DISPLAY_ON, true);
    LCD_I2C_Write(LCD_CMD_CLEAR_DISPLAY, true);
    LCD_I2C_Write(LCD_CMD_ENTRY_MODE_SET, true);
}

void LCD_SendString(char *str) {
    while (*str) {
        LCD_I2C_Write(*str++, false);
    }
}

int main(void) {
    // Set the clock to 50MHz
    SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    I2C_Init();
    LCD_Init();

    LCD_SendString("Hello, World!");

    while (1) {
    }
}
